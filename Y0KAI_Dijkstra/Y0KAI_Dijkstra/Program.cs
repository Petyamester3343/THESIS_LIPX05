using System.Xml.Linq;

using static System.Console;
using static Y0KAI_Dijkstra.SolverData;

namespace Y0KAI_Dijkstra
{
    internal class Program
    {
        public static bool isSilent = false;
        public static string? filePath = null;

        static int Main(string[] args)
        {
            foreach (string arg in args)
            {
                if (arg.Equals("-s", StringComparison.OrdinalIgnoreCase) || arg.Equals("--silent", StringComparison.OrdinalIgnoreCase))
                {
                    isSilent = true;
                    break;
                }
                else if (File.Exists(arg) && arg.EndsWith(".xml", StringComparison.OrdinalIgnoreCase))
                    filePath = arg;

                if (string.IsNullOrEmpty(filePath))
                {
                    if (!isSilent)
                    {
                        Error.WriteLine("ERROR: No valid input file provided!");
                        Hint();
                    }
                    return -1;
                }
            }

            Graph g = ReadGraph(filePath!);
            if (g.Nodes.Count == 0) return 1;

            List<string> finalPathIDs = Dijkstra.Solve(g, isSilent);

            if (finalPathIDs.Count == 0)
            {
                Error.WriteLine("No nodes in solution!");
                return 1;
            }

            StreamWriter output = new("Dijkstra_Solution.txt");
            output.WriteLine("# Dijkstra's Algorithm Solution\n#Generated by Y0KAI_Dijkstra\n# NODES:");

            foreach (string nodeID in finalPathIDs) output.WriteLine($"\tNODE {nodeID}");

            return 0;
        }

        private static Graph ReadGraph(string fullPath)
        {
            if (!File.Exists(fullPath))
            {
                if (!isSilent) WriteLine($"File \"{fullPath}\" does not exist.");
                Hint();
                throw new IOException("File does not exist.");
            }

            try
            {
                Graph g = new();
                XDocument gFile = XDocument.Load(fullPath);
                XElement? root = gFile.Element("SGraph");

                if (root is null)
                {
                    if (!isSilent) Error.WriteLine("ERROR: The graph file is malformed (missing root element).");
                    throw new FormatException("Malformed graph file.");
                }

                var nodes = root.Element("Nodes")?.Elements("Node") ?? [];
                foreach (var el in nodes)
                {
                    string
                        id = el.Element("ID")?.Value ?? throw new FormatException("Node missing ID."),
                        desc = el.Element("Desc")?.Value ?? string.Empty;

                    if (!string.IsNullOrWhiteSpace(id))
                        g.Nodes.Add(id, new() { ID = id, Desc = desc });
                }

                var edges = root.Element("Edges")?.Elements("Edge") ?? [];
                foreach (var el in edges)
                {
                    string
                        from = el.Element("FromID")?.Value ?? throw new FormatException("Edge missing FromID."),
                        to = el.Element("ToID")?.Value ?? throw new FormatException("Edge missing ToID.");
                    double cost = double.Parse(el.Element("Cost")?.Value ?? throw new FormatException("Edge missing Cost."));

                    if (!string.IsNullOrWhiteSpace(from) && !string.IsNullOrWhiteSpace(to) && !double.IsNaN(cost))
                        g.Edges.Add(new() { FromID = from, ToID = to, Cost = cost });
                }

                if (g.Nodes.Count is 0) if (!isSilent) Error.WriteLine("Warning: The graph contains no nodes.");

                return g;
            }
            catch (Exception ex)
            {
                if (!isSilent) WriteLine($"Error reading graph from '{filePath}': {ex.Message}");
                throw;
            }
        }

        private static void Hint() =>
            Error.WriteLine("Usage: Y0KAI_Dijkstra.exe <path_to_SGraph.xml> [-s | --silent]");
    }
}
