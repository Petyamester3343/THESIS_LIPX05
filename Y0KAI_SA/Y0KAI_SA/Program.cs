using System.ComponentModel.DataAnnotations;
using System.Xml.Linq;
using static System.Console;

namespace Y0KAI_SA
{
    internal class Program
    {
        public static bool isSilent = false;
        public static string? filePath = null;

        static int Main(string[] args)
        {
            double
                initTemp = 1000.0,
                coolRate = 0.995;
            int maxIt = 500;

            bool isSilent = false;
            List<string> posArgs = [];

            foreach (string arg in args)
            {
                if (arg.Equals("-s", StringComparison.OrdinalIgnoreCase) || arg.Equals("--silent", StringComparison.OrdinalIgnoreCase))
                {
                    isSilent = true;
                    break;
                }
                else if (File.Exists(arg) && arg.EndsWith(".xml", StringComparison.OrdinalIgnoreCase))
                {
                    filePath = arg;
                    break;
                }
                else posArgs.Add(arg);

                if (string.IsNullOrWhiteSpace(filePath))
                {
                    if (!isSilent)
                    {
                        Error.WriteLine("Error: No valid input file provided!");
                        Hint();
                    }
                    return -1;
                }
            }

            if (args.Length >= 1 && double.TryParse(posArgs[0], out double temp)) initTemp = temp;
            if (args.Length >= 2 && double.TryParse(posArgs[1], out double rate)) coolRate = rate;
            if (args.Length >= 3 && int.TryParse(posArgs[2], out int iter)) maxIt = iter;

            Graph g = ReadGraph(filePath!);
            if (g.Nodes.Count == 0)
            {
                Error.WriteLine("No nodes found in input.");
                return 1;
            }

            SimulatedAnnealing solver = new(g);
            List<string> finalPathIDs = solver.Solve(initTemp, coolRate, maxIt, isSilent);

            if (finalPathIDs.Count == 0)
            {
                if (!isSilent) Error.WriteLine("No valid path found within the node list.");
                return 1;
            }

            StreamWriter output = new("SA_solution.txt");
            output.WriteLine("# Simulated Annealing Solution\n#Generated by Y0KAI_SA\n# NODES:");

            foreach (string node in finalPathIDs)
                output.WriteLine($"\tNODE {node}");

            return 0;
        }


        private static Graph ReadGraph(string filePath)
        {
            if (!File.Exists(filePath))
            {
                Error.WriteLine($"Error: File '{filePath}' does not exist.");
                Hint();
                throw new IOException("File does not exist");
            }

            try
            {
                Graph g = new();
                XDocument gFile = XDocument.Load(filePath);
                XElement? root = gFile.Element("SGraph");

                if (root is null)
                {
                    if (!isSilent) Error.WriteLine($"ERROR: The graph file is malformed (missing root element).");
                    throw new FormatException("Malformed graph file");
                }

                var nodes = root.Element("Nodes")?.Elements("Node") ?? [];
                foreach (var node in nodes)
                {
                    string
                        id = node.Element("ID")?.Value ?? throw new FormatException("Node missing ID"),
                        desc = node.Element("Desc")?.Value ?? string.Empty;

                    if (!string.IsNullOrWhiteSpace(id))
                        g.Nodes[id] = new() { ID = id, Desc = desc };
                }

                var edges = root.Element("Edges")?.Elements("Edge") ?? [];
                foreach (var edge in edges)
                {
                    string
                        from = edge.Element("FromID")?.Value ?? throw new FormatException("Edge missing FromID"),
                        to = edge.Element("ToID")?.Value ?? throw new FormatException("Edge missing ToID");
                    double cost = double.Parse(edge.Element("Cost")?.Value ?? throw new FormatException("Edge missing Cost"));

                    if (!string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(to) && !double.IsNaN(cost))
                        g.Edges.Add(new() { FromID = from, ToID = to, Cost = cost });
                }

                if (g.Nodes.Count == 0) if (!isSilent) Error.WriteLine("Warning: The graph contains no nodes.");

                return g;
            }
            catch (Exception ex)
            {
                if (!isSilent) Error.WriteLine($"Error reading graph from '{filePath}': {ex.Message}");
                throw;
            }
        }
        
        private static void Hint() =>
            Error.WriteLine("Usage: Y0KAI_SA.exe <path_to_SGraph.xml> [initialTemp] [coolingRate] [maxIterations] [-s | --silent]");
    }
}
